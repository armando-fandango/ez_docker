# works for both ubuntu and buster-slim
ARG from
FROM ${from} as base
LABEL org.opencontainers.image.authors="armando.ucf@gmail.com"

ENV DEBIAN_FRONTEND=noninteractive
#ENV TZ=UTC
#RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone
SHELL ["/bin/bash", "-c"]

ARG duid=1000
ARG dgid=1000
ARG uname=ezdev
ARG gname=ezdev

USER root

COPY container-scripts/01_nodoc /etc/dpkg/dpkg.cfg.d/01_nodoc
RUN apt-get -q update \
    && apt-get -q purge -y snapd \
    && apt-get -qq install -y --no-install-recommends \
      software-properties-common \
      sudo gosu \
      ssh \
      lsb-release \
      gnupg2 \
      ca-certificates \
      wget curl rsync \
      zip unzip \
      build-essential \
      autoconf automake libtool ninja-build pkg-config \
      git git-lfs \
      python-is-python3 python3-pip \
      mesa-utils \
      vulkan-tools mesa-vulkan-drivers \
      nano vim \
      terminator \
    && apt-get -q autoremove --purge && apt-get -q clean && rm -rf /var/lib/apt/lists/* \
    && rm -rf /usr/share/doc/ && rm -rf /usr/share/man/ && rm -rf /usr/share/locale/


FROM base as base-with-cmake

# install cmake
RUN wget https://github.com/Kitware/CMake/releases/download/v3.26.3/cmake-3.26.3-Linux-x86_64.sh -q -O /tmp/cmake-install.sh \
  && chmod u+x /tmp/cmake-install.sh \
  && mkdir /opt/cmake \
  && /tmp/cmake-install.sh --skip-license --prefix=/opt/cmake \
  && rm /tmp/cmake-install.sh \
  && ln -s /opt/cmake/bin/* /usr/local/bin \
  && cmake --version

FROM base as base-with-nodejs

ENV NODE_VERSION 20.1.0

RUN ARCH= && dpkgArch="$(dpkg --print-architecture)" \
    && case "${dpkgArch##*-}" in \
      amd64) ARCH='x64';; \
      ppc64el) ARCH='ppc64le';; \
      s390x) ARCH='s390x';; \
      arm64) ARCH='arm64';; \
      armhf) ARCH='armv7l';; \
      i386) ARCH='x86';; \
      *) echo "unsupported architecture"; exit 1 ;; \
    esac \
    && set -ex \
    # libatomic1 for arm
    && apt-get -q update \
    && apt-get install -y dirmngr xz-utils libatomic1 --no-install-recommends \
    && apt-get -q autoremove --purge && apt-get -q clean && rm -rf /var/lib/apt/lists/* \
    #&& for key in \
    #  4ED778F539E3634C779C87C6D7062848A1AB005C \ 
    #  141F07595B7B3FFE74309A937405533BE57C7D57 \
    #  74F12602B6F1C4E913FAA37AD3A89613643B6201 \
    #  DD792F5973C6DE52C432CBDAC77ABFA00DDBF2B7 \
    #  61FC681DFB92A079F1685E77973F295594EC4689 \
    #  8FCCA13FEF1D0C2E91008E09770F7A9A5AE15600 \
    #  C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8 \
    #  890C08DB8579162FEE0DF9DB8BEAB4DFCF555EF4 \
    #  C82FA3AE1CBEDC6BE46B9360C43CEC45C17AB93C \
    #  108F52B48DB57BB0CC439B2997B01419BD92F80A \
    #; do \
    #  gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys "$key" || \
    #  gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$key" ; \
    #done \
    && curl -fsSLO --compressed "https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-$ARCH.tar.xz" \
    #&& curl -fsSLO --compressed "https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc" \
    #&& gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \
    #&& grep " node-v$NODE_VERSION-linux-$ARCH.tar.xz\$" SHASUMS256.txt | sha256sum -c - \
    && mkdir /opt/node \
    && tar -xJf "node-v$NODE_VERSION-linux-$ARCH.tar.xz" -C /opt/node --strip-components=1 --no-same-owner \
    && rm "node-v$NODE_VERSION-linux-$ARCH.tar.xz" \ 
    #SHASUMS256.txt.asc SHASUMS256.txt \
    #&& apt-mark auto '.*' > /dev/null \
    #&& find /usr/local -type f -executable -exec ldd '{}' ';' \
    #  | awk '/=>/ { print $(NF-1) }' \
    #  | sort -u \
    #  | xargs -r dpkg-query --search \
    #  | cut -d: -f1 \
    #  | sort -u \
    #  | xargs -r apt-mark manual \
    #&& apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false \
    ##&& apt-get -q autoremove --purge && apt-get -q clean && rm -rf /var/lib/apt/lists/* \
    && ln -s /opt/node/bin/* /usr/local/bin \
    && ln -s /opt/node/bin/node /usr/local/bin/nodejs \
    # smoke tests
    && node -v && npm -v && npx

ENV YARN_VERSION 1.22.19

RUN set -ex \
  #&& savedAptMark="$(apt-mark showmanual)" \
  #&& apt-get update && apt-get install -y ca-certificates curl wget gnupg dirmngr --no-install-recommends \
  #&& rm -rf /var/lib/apt/lists/* \
  #&& for key in \
  #  6A010C5166006599AA17F08146C2130DFD2497F5 \
  #; do \
  #  gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys "$key" || \
  #  gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$key" ; \
  #done \
  && curl -fsSLO --compressed "https://yarnpkg.com/downloads/$YARN_VERSION/yarn-v$YARN_VERSION.tar.gz" \
  #&& curl -fsSLO --compressed "https://yarnpkg.com/downloads/$YARN_VERSION/yarn-v$YARN_VERSION.tar.gz.asc" \
  #&& gpg --batch --verify yarn-v$YARN_VERSION.tar.gz.asc yarn-v$YARN_VERSION.tar.gz \
  && mkdir -p /opt \
  && tar -xzf yarn-v$YARN_VERSION.tar.gz -C /opt/ \
  && mv /opt/yarn-v$YARN_VERSION /opt/yarn \
  && ln -s /opt/yarn/bin/yarn /usr/local/bin/yarn \
  && ln -s /opt/yarn/bin/yarnpkg /usr/local/bin/yarnpkg \
  && rm yarn-v$YARN_VERSION.tar.gz \
  # yarn-v$YARN_VERSION.tar.gz.asc 
  #&& apt-mark auto '.*' > /dev/null \
  #&& { [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null; } \
  #&& find /usr/local -type f -executable -exec ldd '{}' ';' \
  #  | awk '/=>/ { print $(NF-1) }' \
  #  | sort -u \
  #  | xargs -r dpkg-query --search \
  #  | cut -d: -f1 \
  #  | sort -u \
  #  | xargs -r apt-mark manual \
  #&& apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false \
  # smoke test
  && yarn --version

FROM base as base-final

COPY --from=base-with-cmake /opt/cmake /opt/cmake
# smoke tests
RUN ln -s /opt/cmake/bin/* /usr/local/bin \
  && cmake --version

COPY --from=base-with-nodejs /opt/node /opt/node
COPY --from=base-with-nodejs /opt/yarn /opt/yarn

# smoke tests
RUN ln -s /opt/node/bin/* /usr/local/bin \
    && ln -s /opt/node/bin/node /usr/local/bin/nodejs \
    && node --version && npm --version && npx --version \
    && ln -s /opt/yarn/bin/yarn /usr/local/bin/yarn \
    && ln -s /opt/yarn/bin/yarnpkg /usr/local/bin/yarnpkg \
    && yarn --version

RUN mkdir -p /opt/container-scripts/entrypoint.d && chmod -R 777 /opt/container-scripts

# add the sudo user uname:gname with uid:gid
RUN groupadd --gid ${dgid} ${gname} \
  && useradd --uid ${duid} -g ${gname} -G sudo -s /bin/bash -m ${uname}
RUN echo "${uname} ALL=(root) NOPASSWD:ALL" > /etc/sudoers.d/${uname} && \
    chmod 0440 /etc/sudoers.d/${uname}

USER ${uname}
ENV home=/home/${uname}
WORKDIR ${home}

COPY container-scripts/entrypoint.sh /opt/container-scripts/
COPY container-scripts/10-env.sh /opt/container-scripts/entrypoint.d/
#RUN echo "export LIBGL_ALWAYS_SOFTWARE=1" >> /opt/container-scripts/entrypoint.d/10-env.sh
ENTRYPOINT ["/opt/container-scripts/entrypoint.sh"]
CMD ["bash"]
